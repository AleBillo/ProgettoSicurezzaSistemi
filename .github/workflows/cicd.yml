name: CI/CD Pipeline

on: [push]

jobs:
  checkout:
    name: Checkout code
    runs-on: ubuntu-latest
    outputs:
      code-dir: ${{ steps.checkout.outputs.path }}
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v3

  build:
    name: Build and initialize DB
    runs-on: ubuntu-latest
    needs: checkout
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: onlinebookstore
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
          if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
          echo "MySQL is ready!"
          break
          fi
          echo "Waiting for MySQL..."
          sleep 2
          done

      - name: Initialize database
        run: |
          mysql -h127.0.0.1 -uroot -proot <<EOF
          USE onlinebookstore;
          CREATE TABLE IF NOT EXISTS books(
          barcode VARCHAR(100) PRIMARY KEY,
          name VARCHAR(100),
          author VARCHAR(100),
          price INT,
          quantity INT
          );
          CREATE TABLE IF NOT EXISTS users(
          username VARCHAR(100) PRIMARY KEY,
          password VARCHAR(100),
          firstname VARCHAR(100),
          lastname VARCHAR(100),
          address TEXT,
          phone VARCHAR(100),
          mailid VARCHAR(100),
          usertype INT
          );
          INSERT INTO books VALUES(
          '9780134190563',
          'The Go Programming Language',
          'Alan A. A. Donovan and Brian W. Kernighan',
          400,
          8
          );
          INSERT INTO users VALUES(
          'shashi',
          'shashi',
          'Shashi',
          'Raj',
          'Bihar',
          '1236547089',
          'shashi@gmail.com',
          2
          );
          COMMIT;
          EOF

      - name: Build (Maven)
        run: mvn clean install -B

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: target/*.war

  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AleBillo_ProgettoSicurezzaSistemi

  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build project with Maven
        run: mvn clean install -B

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: onlinebookstore
          path: '.'
          format: HTML
          out: reports
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Report
          path: reports
